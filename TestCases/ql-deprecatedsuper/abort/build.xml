<?xml version="1.0" encoding="UTF-8"?>
<project name="QLCodeGenerator" basedir="." xmlns:sonar="antlib:org.sonar.ant" xmlns:jacoco="antlib:org.jacoco.ant">
		<!-- One jar settings -->
	 	<taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask" onerror="report" />

		<!-- Load properties that are shared with Java -->
		<property name="shared.properties.file" value="codegenerator.properties" />
		
		<!-- Read shared properties -->
		<property file="${shared.properties.file}" />

		<!-- Main properties/dependencies -->
		<property name="src.dir" value="./src/main/java" />
		<property name="test.dir" value="./src/test/java" />
		<property name="build.dir" value="./target" />
		<property name="jar.dir" value="${build.dir}/exec" />
		<property name="lib.dir" value="./lib" />
		<property name="testresources.dir" value="./src/test/resources" />
		<property name="mainresources.dir" value="./src/main/resources" />


		<!-- Used to copy the default code generation boilerplate code (css/js etc) -->
		<!-- Uses common properties! -->
		<property name="bootstrap.static.web.contents.targetdir" value="${jar.dir}/${web.deploy.dir}" />
		<property name="codegen.template.targetdir" value="${jar.dir}/${template.deploy.dir}" />
		<property name="codegen.sourcedir" value="./src/main/resources/codegeneration" />
		<!-- Exclude templates folder to copy to generated web folder, but copy it to the templates deploy folder -->
		<property name="codegen.template.dir.name" value="templates" />
		
		<!-- Generation folders -->
		<property name="classes.dir" value="${build.dir}/classes" />
		<property name="reports.dir" value="${build.dir}/reports" />
		<property name="reports.junit.xml.dir" value="${reports.dir}/junit" />

		<!-- Define the Sonar properties -->
		<property name="sonar.projectKey" value="org.uva.qllang:QLLang" />
		<property name="sonar.projectName" value="QL Code Generator" />
		<property name="sonar.projectVersion" value="1.0" />
		<property name="sonar.language" value="java" />
		<property name="sonar.sources" value="${src.dir}" />
		<property name="sonar.tests" value="${test.dir}" />
		<property name="sonar.binaries" value="${classes.dir}" />
	
		<!-- Generated ANTLR stuff that has to be ignored, also ignore Exception wrappers -->
		<property name="sonar.exclusions" value="**/QLParser.java,**/QLLexer.java,**/QL.g,**/QL.tokens,**/*Exception.java" />
		<property name="sonar.sourceEncoding" value="UTF-8" />
		<property name="sonar.surefire.reportsPath" value="${reports.junit.xml.dir}" />   
	
		<!-- The following properties are required to use JaCoCo: -->
		<property name="sonar.dynamicAnalysis" value="reuseReports" />
		<property name="sonar.java.coveragePlugin" value="jacoco" />
		<property name="sonar.jacoco.reportPath" value="target/jacoco.exec" />

		<!-- Sonar settings for home network -->
		<property name="sonar.jdbc.url" value="jdbc:h2:tcp://localhost:9092/sonar" />
		<property name="sonar.jdbc.username" value="sonar" />
		<property name="sonar.jdbc.password" value="sonar" />
		<property name="sonar.host.url" value="http://localhost:9000" />
  
		<!-- ANT Build targets -->
		<target name="clean">
			<delete dir=".sonar" />
			<delete dir="${build.dir}" />
			<delete dir="${reports.dir}" />
			<delete dir="${classes.dir}" />
			<delete dir="temp" />
		</target>
	
		<target name="init">
			<mkdir dir="${build.dir}" />
			<mkdir dir="${classes.dir}" />
			<mkdir dir="${reports.dir}" />
			<mkdir dir="${reports.junit.xml.dir}" />
		</target>

		<target name="compile" depends="init">
			<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" fork="true" debug="true" includeAntRuntime="false" />
			<javac srcdir="${test.dir}" destdir="${classes.dir}" classpathref="classpath" fork="true" debug="true" includeAntRuntime="false" />
		</target>
	
		<path id="classpath">
			<fileset dir="${lib.dir}" includes="*.jar"/>
		</path>
	
		<target name="test" depends="compile">
			<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
				<classpath path="${lib.dir}/junit-4.11.jar" />
			</taskdef>

			<!-- Import the JaCoCo Ant Task -->
			<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
				<classpath path="${lib.dir}/jacocoant.jar" />
			</taskdef>

			<!-- Run your unit tests, adding the JaCoCo agent -->
			<jacoco:coverage destfile="target/jacoco.exec">
			  <junit fork="yes" includeantruntime="true">
			    <classpath>
			        <pathelement path="${classes.dir}"/>
			    	<pathelement path="${reports.dir}"/>
			    	<pathelement path="${testresources.dir}"/>
			    	<pathelement path="${mainresources.dir}"/>
			    </classpath>
				<classpath refid="classpath" />

				<formatter type="xml" />
				<batchtest todir="${reports.junit.xml.dir}">
				  <fileset dir="${test.dir}">
					<include name="**/Test*.java" />
				  	<exclude name="**/TestBase.java" />
				  </fileset>
				</batchtest>
			  </junit>
			</jacoco:coverage>
		</target>

		<target name="sonar" depends="test">
			<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
				<classpath path="${lib.dir}/sonar-ant-task-2.0.jar" />
			</taskdef>

			<!-- Execute Sonar -->
			<sonar:sonar />
		</target>
	
	    <target name="jar" depends="compile">
	    	<!-- copy static contents to serve to clients -->
			<mkdir dir="${bootstrap.static.web.contents.targetdir}" />
			<copy todir="${bootstrap.static.web.contents.targetdir}">
				<fileset dir="${codegen.sourcedir}">
					<!-- exclude stg templates -->
					<exclude name="**/${codegen.template.dir.name}/" />
				</fileset>
			</copy>
    	
	    	<!-- copy templates to use to transform to static content -->
	    	<mkdir dir="${codegen.template.targetdir}" />
			<copy todir="${codegen.template.targetdir}">
        		<fileset dir="${codegen.sourcedir}/${codegen.template.dir.name}" includes="**/*.stg" />
	    	</copy>
	    	
	    	<!-- create form persistency folder -->
	    	<mkdir dir="${jar.dir}/${forms.save.target.dir}" />
	    	
	        <jar destfile="${jar.dir}/main.jar">
	    		<manifest>
	            	<attribute name="Main-Class" value="org.uva.sea.ql.Main"/>
	        	</manifest>
	        	<fileset dir="${classes.dir}" includes="**/*.class" />
	        </jar>

	    	<one-jar destfile="${jar.dir}/${ant.project.name}.jar">
	    		<manifest>
	    			<attribute name="One-Jar-URL-Factory" value="com.simontuffs.onejar.JarClassLoader$OneJarURLFactory"/>
	            	<attribute name="Main-Class" value="org.uva.sea.ql.Main"/>
	        	</manifest>
	    		<main jar="${jar.dir}/main.jar" />
	    		<lib>  
	    			<fileset dir="${lib.dir}" />  
	    		</lib>
	    	</one-jar>
  	
	    	<delete file="${jar.dir}/main.jar" />
	    	
	    	<!-- copy shared properties -->
    		<copy file="${shared.properties.file}" todir="${jar.dir}" />
	    </target>

		<target name="build" depends="clean,init,compile,jar" />

	    <target name="run" depends="jar">
	        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true">
	        	 <arg line="-i '/Users/abort/Desktop/form.ql' -p 1337" />
	        	  <jvmarg value="-Duser.dir=${jar.dir}"/>
	        </java>
	    </target>

		<target name="all" depends="clean,init,compile,test,sonar" />
</project>